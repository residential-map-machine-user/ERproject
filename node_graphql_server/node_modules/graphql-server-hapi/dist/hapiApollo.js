"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Boom = require("boom");
var GraphiQL = require("graphql-server-module-graphiql");
var graphql_server_core_1 = require("graphql-server-core");
function runHttpQueryWrapper(options, request, reply) {
    return graphql_server_core_1.runHttpQuery([request], {
        method: request.method.toUpperCase(),
        options: options,
        query: request.method === 'post' ? request.payload : request.query,
    }).then(function (gqlResponse) {
        return reply(gqlResponse).type('application/json');
    }, function (error) {
        if ('HttpQueryError' !== error.name) {
            throw error;
        }
        if (true === error.isGraphQLError) {
            return reply(error.message).code(error.statusCode).type('application/json');
        }
        var err = Boom.create(error.statusCode);
        err.output.payload.message = error.message;
        if (error.headers) {
            Object.keys(error.headers).forEach(function (header) {
                err.output.headers[header] = error.headers[header];
            });
        }
        return reply(err);
    });
}
var graphqlHapi = function (server, options, next) {
    if (!options || !options.graphqlOptions) {
        throw new Error('Apollo Server requires options.');
    }
    if (arguments.length !== 3) {
        throw new Error("Apollo Server expects exactly 3 argument, got " + arguments.length);
    }
    server.route({
        method: ['GET', 'POST'],
        path: options.path || '/graphql',
        config: options.route || {},
        handler: function (request, reply) { return runHttpQueryWrapper(options.graphqlOptions, request, reply); },
    });
    return next();
};
exports.graphqlHapi = graphqlHapi;
graphqlHapi.attributes = {
    name: 'graphql',
    version: '0.0.1',
};
var graphiqlHapi = function (server, options, next) {
    server.method('getGraphiQLParams', getGraphiQLParams);
    server.method('renderGraphiQL', renderGraphiQL);
    var config = Object.assign(options.route || {}, {
        plugins: {
            graphiql: options.graphiqlOptions,
        },
        pre: [{
                assign: 'graphiqlParams',
                method: 'getGraphiQLParams',
            }, {
                assign: 'graphiQLString',
                method: 'renderGraphiQL(route, pre.graphiqlParams)',
            }],
    });
    server.route({
        method: 'GET',
        path: options.path || '/graphql',
        config: config,
        handler: function (request, reply) {
            reply(request.pre['graphiQLString']).header('Content-Type', 'text/html');
        },
    });
    next();
};
exports.graphiqlHapi = graphiqlHapi;
graphiqlHapi.attributes = {
    name: 'graphiql',
    version: '0.0.1',
};
function getGraphiQLParams(request, reply) {
    var q = request.query || {};
    var query = q.query || '';
    var variables = q.variables;
    var operationName = q.operationName || '';
    reply({ query: query, variables: variables, operationName: operationName });
}
function renderGraphiQL(route, graphiqlParams, reply) {
    var graphiqlOptions = route.settings.plugins['graphiql'];
    var graphiQLString = GraphiQL.renderGraphiQL({
        endpointURL: graphiqlOptions.endpointURL,
        subscriptionsEndpoint: graphiqlOptions.subscriptionsEndpoint,
        query: graphiqlParams.query || graphiqlOptions.query,
        variables: graphiqlParams.variables && JSON.parse(graphiqlParams.variables) || graphiqlOptions.variables,
        operationName: graphiqlParams.operationName || graphiqlOptions.operationName,
        passHeader: graphiqlOptions.passHeader,
    });
    reply(graphiQLString);
}
//# sourceMappingURL=hapiApollo.js.map